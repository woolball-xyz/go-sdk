
/*
 * Woolball AI Network API
 *
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type TextGenerationApiService service
/*
TextGenerationApiService Text Generation - Multi-Provider
Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param provider
 * @param model
 * @param input
 * @param topK
 * @param topP
 * @param temperature
 * @param repetitionPenalty
 * @param dtype
 * @param maxLength
 * @param maxNewTokens
 * @param minLength
 * @param minNewTokens
 * @param doSample
 * @param numBeams
 * @param noRepeatNgramSize
 * @param contextWindowSize
 * @param slidingWindowSize
 * @param attentionSinkSize
 * @param frequencyPenalty
 * @param presencePenalty
 * @param bosTokenId
 * @param maxTokens
 * @param randomSeed
@return TextGenerationResponse
*/
func (a *TextGenerationApiService) TextGeneration(ctx context.Context, provider string, model string, input string, topK int32, topP float64, temperature float64, repetitionPenalty float64, dtype string, maxLength int32, maxNewTokens int32, minLength int32, minNewTokens int32, doSample bool, numBeams int32, noRepeatNgramSize int32, contextWindowSize int32, slidingWindowSize int32, attentionSinkSize int32, frequencyPenalty float64, presencePenalty float64, bosTokenId int32, maxTokens int32, randomSeed int32) (TextGenerationResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue TextGenerationResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/text-generation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("provider", parameterToString(provider, ""))
	localVarFormParams.Add("model", parameterToString(model, ""))
	localVarFormParams.Add("input", parameterToString(input, ""))
	localVarFormParams.Add("top_k", parameterToString(topK, ""))
	localVarFormParams.Add("top_p", parameterToString(topP, ""))
	localVarFormParams.Add("temperature", parameterToString(temperature, ""))
	localVarFormParams.Add("repetition_penalty", parameterToString(repetitionPenalty, ""))
	localVarFormParams.Add("dtype", parameterToString(dtype, ""))
	localVarFormParams.Add("max_length", parameterToString(maxLength, ""))
	localVarFormParams.Add("max_new_tokens", parameterToString(maxNewTokens, ""))
	localVarFormParams.Add("min_length", parameterToString(minLength, ""))
	localVarFormParams.Add("min_new_tokens", parameterToString(minNewTokens, ""))
	localVarFormParams.Add("do_sample", parameterToString(doSample, ""))
	localVarFormParams.Add("num_beams", parameterToString(numBeams, ""))
	localVarFormParams.Add("no_repeat_ngram_size", parameterToString(noRepeatNgramSize, ""))
	localVarFormParams.Add("context_window_size", parameterToString(contextWindowSize, ""))
	localVarFormParams.Add("sliding_window_size", parameterToString(slidingWindowSize, ""))
	localVarFormParams.Add("attention_sink_size", parameterToString(attentionSinkSize, ""))
	localVarFormParams.Add("frequency_penalty", parameterToString(frequencyPenalty, ""))
	localVarFormParams.Add("presence_penalty", parameterToString(presencePenalty, ""))
	localVarFormParams.Add("bos_token_id", parameterToString(bosTokenId, ""))
	localVarFormParams.Add("max_tokens", parameterToString(maxTokens, ""))
	localVarFormParams.Add("random_seed", parameterToString(randomSeed, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v TextGenerationResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Object
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
